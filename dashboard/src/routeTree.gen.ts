/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth.index'
import { Route as AuthSignupImport } from './routes/auth.signup'
import { Route as AuthLoginImport } from './routes/auth.login'
import { Route as AuthTestImport } from './routes/_auth.test'
import { Route as AuthProjectsImport } from './routes/_auth.projects'
import { Route as AuthDocsImport } from './routes/_auth.docs'
import { Route as AuthAboutImport } from './routes/_auth.about'
import { Route as AuthProjectsProjectIdImport } from './routes/_auth.projects.$projectId'
import { Route as AuthProjectsProjectIdWorkflowsImport } from './routes/_auth.projects.$projectId.workflows'
import { Route as AuthProjectsProjectIdWorkflowsWorkflowNameImport } from './routes/_auth.projects.$projectId.workflows.$workflowName'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthTestRoute = AuthTestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProjectsRoute = AuthProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDocsRoute = AuthDocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAboutRoute = AuthAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProjectsProjectIdRoute = AuthProjectsProjectIdImport.update({
  id: '/$projectId',
  path: '/$projectId',
  getParentRoute: () => AuthProjectsRoute,
} as any)

const AuthProjectsProjectIdWorkflowsRoute =
  AuthProjectsProjectIdWorkflowsImport.update({
    id: '/workflows',
    path: '/workflows',
    getParentRoute: () => AuthProjectsProjectIdRoute,
  } as any)

const AuthProjectsProjectIdWorkflowsWorkflowNameRoute =
  AuthProjectsProjectIdWorkflowsWorkflowNameImport.update({
    id: '/$workflowName',
    path: '/$workflowName',
    getParentRoute: () => AuthProjectsProjectIdWorkflowsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_auth/about': {
      id: '/_auth/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthAboutImport
      parentRoute: typeof AuthImport
    }
    '/_auth/docs': {
      id: '/_auth/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof AuthDocsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/projects': {
      id: '/_auth/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AuthProjectsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/test': {
      id: '/_auth/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof AuthTestImport
      parentRoute: typeof AuthImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/projects/$projectId': {
      id: '/_auth/projects/$projectId'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof AuthProjectsProjectIdImport
      parentRoute: typeof AuthProjectsImport
    }
    '/_auth/projects/$projectId/workflows': {
      id: '/_auth/projects/$projectId/workflows'
      path: '/workflows'
      fullPath: '/projects/$projectId/workflows'
      preLoaderRoute: typeof AuthProjectsProjectIdWorkflowsImport
      parentRoute: typeof AuthProjectsProjectIdImport
    }
    '/_auth/projects/$projectId/workflows/$workflowName': {
      id: '/_auth/projects/$projectId/workflows/$workflowName'
      path: '/$workflowName'
      fullPath: '/projects/$projectId/workflows/$workflowName'
      preLoaderRoute: typeof AuthProjectsProjectIdWorkflowsWorkflowNameImport
      parentRoute: typeof AuthProjectsProjectIdWorkflowsImport
    }
  }
}

// Create and export the route tree

interface AuthProjectsProjectIdWorkflowsRouteChildren {
  AuthProjectsProjectIdWorkflowsWorkflowNameRoute: typeof AuthProjectsProjectIdWorkflowsWorkflowNameRoute
}

const AuthProjectsProjectIdWorkflowsRouteChildren: AuthProjectsProjectIdWorkflowsRouteChildren =
  {
    AuthProjectsProjectIdWorkflowsWorkflowNameRoute:
      AuthProjectsProjectIdWorkflowsWorkflowNameRoute,
  }

const AuthProjectsProjectIdWorkflowsRouteWithChildren =
  AuthProjectsProjectIdWorkflowsRoute._addFileChildren(
    AuthProjectsProjectIdWorkflowsRouteChildren,
  )

interface AuthProjectsProjectIdRouteChildren {
  AuthProjectsProjectIdWorkflowsRoute: typeof AuthProjectsProjectIdWorkflowsRouteWithChildren
}

const AuthProjectsProjectIdRouteChildren: AuthProjectsProjectIdRouteChildren = {
  AuthProjectsProjectIdWorkflowsRoute:
    AuthProjectsProjectIdWorkflowsRouteWithChildren,
}

const AuthProjectsProjectIdRouteWithChildren =
  AuthProjectsProjectIdRoute._addFileChildren(
    AuthProjectsProjectIdRouteChildren,
  )

interface AuthProjectsRouteChildren {
  AuthProjectsProjectIdRoute: typeof AuthProjectsProjectIdRouteWithChildren
}

const AuthProjectsRouteChildren: AuthProjectsRouteChildren = {
  AuthProjectsProjectIdRoute: AuthProjectsProjectIdRouteWithChildren,
}

const AuthProjectsRouteWithChildren = AuthProjectsRoute._addFileChildren(
  AuthProjectsRouteChildren,
)

interface AuthRouteChildren {
  AuthAboutRoute: typeof AuthAboutRoute
  AuthDocsRoute: typeof AuthDocsRoute
  AuthProjectsRoute: typeof AuthProjectsRouteWithChildren
  AuthTestRoute: typeof AuthTestRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAboutRoute: AuthAboutRoute,
  AuthDocsRoute: AuthDocsRoute,
  AuthProjectsRoute: AuthProjectsRouteWithChildren,
  AuthTestRoute: AuthTestRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/about': typeof AuthAboutRoute
  '/docs': typeof AuthDocsRoute
  '/projects': typeof AuthProjectsRouteWithChildren
  '/test': typeof AuthTestRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/': typeof AuthIndexRoute
  '/projects/$projectId': typeof AuthProjectsProjectIdRouteWithChildren
  '/projects/$projectId/workflows': typeof AuthProjectsProjectIdWorkflowsRouteWithChildren
  '/projects/$projectId/workflows/$workflowName': typeof AuthProjectsProjectIdWorkflowsWorkflowNameRoute
}

export interface FileRoutesByTo {
  '/about': typeof AuthAboutRoute
  '/docs': typeof AuthDocsRoute
  '/projects': typeof AuthProjectsRouteWithChildren
  '/test': typeof AuthTestRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/': typeof AuthIndexRoute
  '/projects/$projectId': typeof AuthProjectsProjectIdRouteWithChildren
  '/projects/$projectId/workflows': typeof AuthProjectsProjectIdWorkflowsRouteWithChildren
  '/projects/$projectId/workflows/$workflowName': typeof AuthProjectsProjectIdWorkflowsWorkflowNameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/about': typeof AuthAboutRoute
  '/_auth/docs': typeof AuthDocsRoute
  '/_auth/projects': typeof AuthProjectsRouteWithChildren
  '/_auth/test': typeof AuthTestRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/_auth/': typeof AuthIndexRoute
  '/_auth/projects/$projectId': typeof AuthProjectsProjectIdRouteWithChildren
  '/_auth/projects/$projectId/workflows': typeof AuthProjectsProjectIdWorkflowsRouteWithChildren
  '/_auth/projects/$projectId/workflows/$workflowName': typeof AuthProjectsProjectIdWorkflowsWorkflowNameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/docs'
    | '/projects'
    | '/test'
    | '/auth/login'
    | '/auth/signup'
    | '/'
    | '/projects/$projectId'
    | '/projects/$projectId/workflows'
    | '/projects/$projectId/workflows/$workflowName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/docs'
    | '/projects'
    | '/test'
    | '/auth/login'
    | '/auth/signup'
    | '/'
    | '/projects/$projectId'
    | '/projects/$projectId/workflows'
    | '/projects/$projectId/workflows/$workflowName'
  id:
    | '__root__'
    | '/_auth'
    | '/_auth/about'
    | '/_auth/docs'
    | '/_auth/projects'
    | '/_auth/test'
    | '/auth/login'
    | '/auth/signup'
    | '/_auth/'
    | '/_auth/projects/$projectId'
    | '/_auth/projects/$projectId/workflows'
    | '/_auth/projects/$projectId/workflows/$workflowName'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/auth/login",
        "/auth/signup"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/about",
        "/_auth/docs",
        "/_auth/projects",
        "/_auth/test",
        "/_auth/"
      ]
    },
    "/_auth/about": {
      "filePath": "_auth.about.tsx",
      "parent": "/_auth"
    },
    "/_auth/docs": {
      "filePath": "_auth.docs.tsx",
      "parent": "/_auth"
    },
    "/_auth/projects": {
      "filePath": "_auth.projects.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/projects/$projectId"
      ]
    },
    "/_auth/test": {
      "filePath": "_auth.test.tsx",
      "parent": "/_auth"
    },
    "/auth/login": {
      "filePath": "auth.login.tsx"
    },
    "/auth/signup": {
      "filePath": "auth.signup.tsx"
    },
    "/_auth/": {
      "filePath": "_auth.index.tsx",
      "parent": "/_auth"
    },
    "/_auth/projects/$projectId": {
      "filePath": "_auth.projects.$projectId.tsx",
      "parent": "/_auth/projects",
      "children": [
        "/_auth/projects/$projectId/workflows"
      ]
    },
    "/_auth/projects/$projectId/workflows": {
      "filePath": "_auth.projects.$projectId.workflows.tsx",
      "parent": "/_auth/projects/$projectId",
      "children": [
        "/_auth/projects/$projectId/workflows/$workflowName"
      ]
    },
    "/_auth/projects/$projectId/workflows/$workflowName": {
      "filePath": "_auth.projects.$projectId.workflows.$workflowName.tsx",
      "parent": "/_auth/projects/$projectId/workflows"
    }
  }
}
ROUTE_MANIFEST_END */
